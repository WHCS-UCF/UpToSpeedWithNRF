
NRF24L01mega88test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000542  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000065  00800100  00800100  000005b6  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000005b6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000a8  00000000  00000000  000005e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000daf  00000000  00000000  0000068e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000350  00000000  00000000  0000143d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000039a  00000000  00000000  0000178d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001f8  00000000  00000000  00001b28  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000044f  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000006ff  00000000  00000000  0000216f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000098  00000000  00000000  0000286e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	3c c0       	rjmp	.+120    	; 0x9e <__vector_18>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a5 36       	cpi	r26, 0x65	; 101
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	dd d1       	rcall	.+954    	; 0x40c <main>
  52:	75 c2       	rjmp	.+1258   	; 0x53e <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <_Z12readCircbuffPV10CircBuff_t>:
//Then head is incremented to the next spot
//Wrapping is handled with modulus of BUFF_SIZE
//NO OVERFLOW CHECKING IMPLEMENTED
unsigned char readCircbuff(volatile CircBuff_t *cBuff)
{
	unsigned char readVal = cBuff->Data[cBuff->Head];
  56:	fc 01       	movw	r30, r24
  58:	e0 5c       	subi	r30, 0xC0	; 192
  5a:	ff 4f       	sbci	r31, 0xFF	; 255
  5c:	20 81       	ld	r18, Z
  5e:	dc 01       	movw	r26, r24
  60:	a2 0f       	add	r26, r18
  62:	b1 1d       	adc	r27, r1
  64:	4c 91       	ld	r20, X
	cBuff->Head= (cBuff->Head+1)%BUFF_SIZE;
  66:	20 81       	ld	r18, Z
  68:	30 e0       	ldi	r19, 0x00	; 0
  6a:	2f 5f       	subi	r18, 0xFF	; 255
  6c:	3f 4f       	sbci	r19, 0xFF	; 255
  6e:	2f 73       	andi	r18, 0x3F	; 63
  70:	30 78       	andi	r19, 0x80	; 128
  72:	20 83       	st	Z, r18
	return readVal;
}
  74:	84 2f       	mov	r24, r20
  76:	08 95       	ret

00000078 <_Z13writeCircBuffPV10CircBuff_th>:
//Then tail is incremented by 1
//Wrapping is handled by modulus of BUFF_SIZE
//NO OVERFLOW CHECKING IMPLEMENTED
void writeCircBuff(volatile CircBuff_t *cBuff, unsigned char val)
{
	cBuff->Data[cBuff->Head] = val;
  78:	fc 01       	movw	r30, r24
  7a:	e0 5c       	subi	r30, 0xC0	; 192
  7c:	ff 4f       	sbci	r31, 0xFF	; 255
  7e:	20 81       	ld	r18, Z
  80:	fc 01       	movw	r30, r24
  82:	e2 0f       	add	r30, r18
  84:	f1 1d       	adc	r31, r1
  86:	60 83       	st	Z, r22
	cBuff->Tail = (cBuff->Tail+1)%BUFF_SIZE;
  88:	fc 01       	movw	r30, r24
  8a:	ef 5b       	subi	r30, 0xBF	; 191
  8c:	ff 4f       	sbci	r31, 0xFF	; 255
  8e:	20 81       	ld	r18, Z
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	2f 5f       	subi	r18, 0xFF	; 255
  94:	3f 4f       	sbci	r19, 0xFF	; 255
  96:	2f 73       	andi	r18, 0x3F	; 63
  98:	30 78       	andi	r19, 0x80	; 128
  9a:	20 83       	st	Z, r18
  9c:	08 95       	ret

0000009e <__vector_18>:
/* Interrupt Service Routine for Receive Complete 
NOTE: vector name changes with different AVRs see AVRStudio -
Help - AVR-Libc reference - Library Reference - <avr/interrupt.h>: Interrupts
for vector names other than USART_RXC_vect for ATmega32 */

ISR(USART_RX_vect){
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	2f 93       	push	r18
  aa:	3f 93       	push	r19
  ac:	4f 93       	push	r20
  ae:	5f 93       	push	r21
  b0:	6f 93       	push	r22
  b2:	7f 93       	push	r23
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	af 93       	push	r26
  ba:	bf 93       	push	r27
  bc:	ef 93       	push	r30
  be:	ff 93       	push	r31
 
   cli(); // Turn off interrupts temporarily to make sure the data gets stored in the ring buffer
  c0:	f8 94       	cli
   value = UDR0;             //read UART register into value
  c2:	80 91 c6 00 	lds	r24, 0x00C6
  c6:	80 93 64 01 	sts	0x0164, r24
   writeCircBuff(&rBuff,value); //Write the data into the ring buffer, this isn't interrupted because ints are off
  ca:	60 91 64 01 	lds	r22, 0x0164
  ce:	80 e2       	ldi	r24, 0x20	; 32
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	d2 df       	rcall	.-92     	; 0x78 <_Z13writeCircBuffPV10CircBuff_th>
   sei();  //Reenable interrupts
  d4:	78 94       	sei
}
  d6:	ff 91       	pop	r31
  d8:	ef 91       	pop	r30
  da:	bf 91       	pop	r27
  dc:	af 91       	pop	r26
  de:	9f 91       	pop	r25
  e0:	8f 91       	pop	r24
  e2:	7f 91       	pop	r23
  e4:	6f 91       	pop	r22
  e6:	5f 91       	pop	r21
  e8:	4f 91       	pop	r20
  ea:	3f 91       	pop	r19
  ec:	2f 91       	pop	r18
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <_Z10USART_Initv>:
  to change use UCSRC, see AVR datasheet*/ 

  // Enable receiver and transmitter and receive complete interrupt 
  //UCSR0B = ((1<<TXEN0)|(1<<RXEN0) | (1<<RXCIE0));
  
  	UCSR0A = (1 << U2X0);
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	80 93 c0 00 	sts	0x00C0, r24

  	/* Turn on the transmission and reception circuitry. */
  	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  fe:	e1 ec       	ldi	r30, 0xC1	; 193
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	88 e1       	ldi	r24, 0x18	; 24
 104:	80 83       	st	Z, r24
  	/* Use 8-bit character sizes. */
  	//UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);

  	/* BAUD prescale */
  	UBRR0 = 12;
 106:	8c e0       	ldi	r24, 0x0C	; 12
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 c5 00 	sts	0x00C5, r25
 10e:	80 93 c4 00 	sts	0x00C4, r24
  	/* Load upper 8-bits of the baud rate value into the high byte of the UBRR register. */
  	//UBRR0H = (BAUD_PRESCALE >> 8);
  	/* Load lower 8-bits of the baud rate value into the low byte of the UBRR register. */
  	//UBRR0L = BAUD_PRESCALE;

  	UCSR0B |= (1 << RXCIE0);
 112:	80 81       	ld	r24, Z
 114:	80 68       	ori	r24, 0x80	; 128
 116:	80 83       	st	Z, r24

  	sei();
 118:	78 94       	sei
 11a:	08 95       	ret

0000011c <_Z14USART_SendByteh>:


void USART_SendByte(uint8_t u8Data){

  // Wait until last byte has been transmitted
  while((UCSR0A &(1<<UDRE0)) == 0);
 11c:	e0 ec       	ldi	r30, 0xC0	; 192
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	90 81       	ld	r25, Z
 122:	95 ff       	sbrs	r25, 5
 124:	fd cf       	rjmp	.-6      	; 0x120 <_Z14USART_SendByteh+0x4>

  // Transmit data
  UDR0 = u8Data;
 126:	80 93 c6 00 	sts	0x00C6, r24
 12a:	08 95       	ret

0000012c <_Z8Led_initv>:

//This assumes that an led is attached to Port B pin 0
//+ side on pin 0, - side connected to resistor connecting to ground.
void Led_init(void){
	//outputs, PB0 on
	DDRB |= 0x01;       
 12c:	20 9a       	sbi	0x04, 0	; 4
	PORTB |= 0x01;        
 12e:	28 9a       	sbi	0x05, 0	; 5
 130:	08 95       	ret

00000132 <_Z7InitSPIv>:
*/

void InitSPI(void)
{
	//Clear port B SPI pins for init
	DDRB &= ~((1<<DDB3)|(1<<DDB4)|(1<<DDB2)|(1<<DDB5));
 132:	84 b1       	in	r24, 0x04	; 4
 134:	83 7c       	andi	r24, 0xC3	; 195
 136:	84 b9       	out	0x04, r24	; 4
	
	//Set SCK (PB5), MOSI (PB3) , CSN (SS & PB2) & C  as outport
	//OBS!!! Has to be set before SPI-Enable below
	DDRB |= (1<<DDB5) | (1<<DDB3) | (1<<DDB2) |(1<<DDB1);
 138:	84 b1       	in	r24, 0x04	; 4
 13a:	8e 62       	ori	r24, 0x2E	; 46
 13c:	84 b9       	out	0x04, r24	; 4
	        (0<<SPIE)|              // SPI Interupt Enable
			(0<<DORD)|              // Data Order (0:MSB first / 1:LSB first)
	        (1<<MSTR)|              // Master/Slave select
	        (0<<SPR1)|(1<<SPR0)|    // SPI Clock Rate
			(0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
	        (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)
 13e:	81 e5       	ldi	r24, 0x51	; 81
 140:	8c bd       	out	0x2c, r24	; 44
	
	//PORTB |= (1 <<2);
	SETBIT(PORTB, 2);	//CSN IR_High to start with, nothing to be sent to the nRF yet!
 142:	2a 9a       	sbi	0x05, 2	; 5
	//PORTB &= (~(1<<1)); 
	CLEARBIT(PORTB, 1);	//CE low to start with, nothing to send/receive yet!
 144:	29 98       	cbi	0x05, 1	; 5
 146:	08 95       	ret

00000148 <_Z12WriteByteSPIh>:

//Sends and receives a byte through SPI
uint8_t WriteByteSPI(uint8_t cData)
{
	//Load byte to Data register
	SPDR = cData;
 148:	8e bd       	out	0x2e, r24	; 46
	
	/* Wait for transmission complete */
	while((SPSR & (1<<SPIF))==0);
 14a:	0d b4       	in	r0, 0x2d	; 45
 14c:	07 fe       	sbrs	r0, 7
 14e:	fd cf       	rjmp	.-6      	; 0x14a <_Z12WriteByteSPIh+0x2>
	
	//Return what's received from the nRF
	return SPDR;
 150:	8e b5       	in	r24, 0x2e	; 46
}
 152:	08 95       	ret

00000154 <_Z6GetRegh>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	92 e1       	ldi	r25, 0x12	; 18
 156:	9a 95       	dec	r25
 158:	f1 f7       	brne	.-4      	; 0x156 <_Z6GetRegh+0x2>
 15a:	00 00       	nop
uint8_t GetReg(uint8_t reg)
{
	//make sure last command was a while ago
	_delay_us(55);
	//PORTB &= (~(1<<2)); 
	CLEARBIT(PORTB, 2);	//CSN low - nRF starts to listen for command
 15c:	2a 98       	cbi	0x05, 2	; 5
 15e:	92 e1       	ldi	r25, 0x12	; 18
 160:	9a 95       	dec	r25
 162:	f1 f7       	brne	.-4      	; 0x160 <_Z6GetRegh+0xc>
 164:	00 00       	nop
	_delay_us(55);
	WriteByteSPI(R_REGISTER + reg);	//R_Register = set the nRF to reading mode, "reg" = this register well be read back
 166:	f0 df       	rcall	.-32     	; 0x148 <_Z12WriteByteSPIh>
 168:	85 e0       	ldi	r24, 0x05	; 5
 16a:	8a 95       	dec	r24
 16c:	f1 f7       	brne	.-4      	; 0x16a <_Z6GetRegh+0x16>
	_delay_us(15);
	reg = WriteByteSPI(NOP);	//Send NOP (dummy byte) once to receive back the first byte in the "reg" register
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	eb df       	rcall	.-42     	; 0x148 <_Z12WriteByteSPIh>
 172:	95 e0       	ldi	r25, 0x05	; 5
 174:	9a 95       	dec	r25
 176:	f1 f7       	brne	.-4      	; 0x174 <_Z6GetRegh+0x20>
	_delay_us(15);
	//PORTB |= (1<<2); 
	SETBIT(PORTB, 2);	//CSN Hi - nRF goes back to doing nothing
 178:	2a 9a       	sbi	0x05, 2	; 5
	return reg;	// Return the read register
}
 17a:	08 95       	ret

0000017c <_Z10WriteToNrfhhPhh>:

uint8_t *WriteToNrf(uint8_t ReadWrite, uint8_t reg, uint8_t *val, uint8_t antVal)	//tar in "ReadWrite" (W el R), "reg" (ett register), "*val" (en array) & "antVal" (antal integer i variabeln)
{
 17c:	cf 92       	push	r12
 17e:	df 92       	push	r13
 180:	ef 92       	push	r14
 182:	ff 92       	push	r15
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	d8 2e       	mov	r13, r24
 18e:	c6 2e       	mov	r12, r22
 190:	7a 01       	movw	r14, r20
 192:	02 2f       	mov	r16, r18
	cli();	//disable global interrupt
 194:	f8 94       	cli
	
	if (ReadWrite == W)	//if "W" then you want to write to the nRF (read mode "R" == 0x00, so skipping that one)
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	d8 12       	cpse	r13, r24
 19a:	04 c0       	rjmp	.+8      	; 0x1a4 <_Z10WriteToNrfhhPhh+0x28>
	{
		reg = W_REGISTER | (REGISTER_MASK & reg);	//ex: reg = EN_AA: 0b0010 0000 + 0b0000 0001 = 0b0010 0001
 19c:	86 2f       	mov	r24, r22
 19e:	8f 71       	andi	r24, 0x1F	; 31
 1a0:	80 62       	ori	r24, 0x20	; 32
 1a2:	c8 2e       	mov	r12, r24
 1a4:	82 e1       	ldi	r24, 0x12	; 18
 1a6:	8a 95       	dec	r24
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <_Z10WriteToNrfhhPhh+0x2a>
 1aa:	00 00       	nop
	//Create an array to be returned at the end.
	//Static uint8_t is needed to be able to return an array
	static uint8_t ret[32];	
	
	_delay_us(55);		//make sure the last command was a while ago
	CLEARBIT(PORTB, 2);	//CSN low = nRF starts to listen for command
 1ac:	2a 98       	cbi	0x05, 2	; 5
	//_delay_us(55);
	WriteByteSPI(reg);	//set the nRF to Write or read mode of "reg"
 1ae:	8c 2d       	mov	r24, r12
 1b0:	cb df       	rcall	.-106    	; 0x148 <_Z12WriteByteSPIh>
	//_delay_us(15);
	
	int i;
	for(i=0; i<antVal; i++)
 1b2:	10 e0       	ldi	r17, 0x00	; 0
 1b4:	10 16       	cp	r1, r16
 1b6:	11 06       	cpc	r1, r17
 1b8:	bc f4       	brge	.+46     	; 0x1e8 <_Z10WriteToNrfhhPhh+0x6c>
 1ba:	c0 e0       	ldi	r28, 0x00	; 0
 1bc:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (ReadWrite == R && reg != W_TX_PAYLOAD)
 1be:	d1 10       	cpse	r13, r1
 1c0:	0a c0       	rjmp	.+20     	; 0x1d6 <_Z10WriteToNrfhhPhh+0x5a>
 1c2:	80 ea       	ldi	r24, 0xA0	; 160
 1c4:	c8 16       	cp	r12, r24
 1c6:	39 f0       	breq	.+14     	; 0x1d6 <_Z10WriteToNrfhhPhh+0x5a>
		{
			ret[i]=WriteByteSPI(NOP);	//send dummy bytes to read out the data
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	be df       	rcall	.-132    	; 0x148 <_Z12WriteByteSPIh>
 1cc:	fe 01       	movw	r30, r28
 1ce:	e0 50       	subi	r30, 0x00	; 0
 1d0:	ff 4f       	sbci	r31, 0xFF	; 255
 1d2:	80 83       	st	Z, r24
 1d4:	05 c0       	rjmp	.+10     	; 0x1e0 <_Z10WriteToNrfhhPhh+0x64>
 1d6:	f7 01       	movw	r30, r14
 1d8:	ec 0f       	add	r30, r28
 1da:	fd 1f       	adc	r31, r29
			//_delay_us(15);
		}
		else
		{
			WriteByteSPI(val[i]);	//Send the commands to the nRF once at a time
 1dc:	80 81       	ld	r24, Z
 1de:	b4 df       	rcall	.-152    	; 0x148 <_Z12WriteByteSPIh>
	//_delay_us(55);
	WriteByteSPI(reg);	//set the nRF to Write or read mode of "reg"
	//_delay_us(15);
	
	int i;
	for(i=0; i<antVal; i++)
 1e0:	21 96       	adiw	r28, 0x01	; 1
 1e2:	c0 17       	cp	r28, r16
 1e4:	d1 07       	cpc	r29, r17
 1e6:	5c f3       	brlt	.-42     	; 0x1be <_Z10WriteToNrfhhPhh+0x42>
		{
			WriteByteSPI(val[i]);	//Send the commands to the nRF once at a time
			//_delay_us(15);
		}
	}
	SETBIT(PORTB, 2);	//CSN Hi - nRF goes back to doing nothing.
 1e8:	2a 9a       	sbi	0x05, 2	; 5
	
	sei(); //enable global interrupt
 1ea:	78 94       	sei
	
	return ret;	//return an array
}
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	ff 90       	pop	r15
 1fa:	ef 90       	pop	r14
 1fc:	df 90       	pop	r13
 1fe:	cf 90       	pop	r12
 200:	08 95       	ret

00000202 <_Z13nrf24L01_initv>:

//Initializes the nRF.
void nrf24L01_init(void)
{
 202:	0f 93       	push	r16
 204:	1f 93       	push	r17
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	00 d0       	rcall	.+0      	; 0x20c <_Z13nrf24L01_initv+0xa>
 20c:	00 d0       	rcall	.+0      	; 0x20e <_Z13nrf24L01_initv+0xc>
 20e:	1f 92       	push	r1
 210:	cd b7       	in	r28, 0x3d	; 61
 212:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	87 ea       	ldi	r24, 0xA7	; 167
 216:	91 e6       	ldi	r25, 0x61	; 97
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <_Z13nrf24L01_initv+0x16>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <_Z13nrf24L01_initv+0x1c>
 21e:	00 00       	nop
	_delay_ms(100);	//allow radio to reach power down if shut down
	
	uint8_t val[5];	//An array of integers to send to the *WriteToNrf function
	
	//RF channel setup - choose frequency 2,400 - 2,527GHz 1MHz/step
	val[0]=0x05;
 220:	05 e0       	ldi	r16, 0x05	; 5
 222:	09 83       	std	Y+1, r16	; 0x01
	WriteToNrf(W, RF_CH, val, 1); //RF channel registry 0b0000 0001 = 2,401GHz (same on TX and RX)
 224:	21 e0       	ldi	r18, 0x01	; 1
 226:	ae 01       	movw	r20, r28
 228:	4f 5f       	subi	r20, 0xFF	; 255
 22a:	5f 4f       	sbci	r21, 0xFF	; 255
 22c:	65 e0       	ldi	r22, 0x05	; 5
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	a5 df       	rcall	.-182    	; 0x17c <_Z10WriteToNrfhhPhh>
		
	// payload width setup - 1-32byte (how many bytes to send per transmission)
	val[0]=5;		//Send 1 bytes per package this time (same on receiver and transmitter)
 232:	09 83       	std	Y+1, r16	; 0x01
	WriteToNrf(W, RX_PW_P0, val, 1);
 234:	21 e0       	ldi	r18, 0x01	; 1
 236:	ae 01       	movw	r20, r28
 238:	4f 5f       	subi	r20, 0xFF	; 255
 23a:	5f 4f       	sbci	r21, 0xFF	; 255
 23c:	61 e1       	ldi	r22, 0x11	; 17
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	9d df       	rcall	.-198    	; 0x17c <_Z10WriteToNrfhhPhh>
	
	// payload width setup - 1-32byte (how many bytes to send per transmission)
	val[0]=5;		//Send 5 bytes per package this time (same on receiver and transmitter)
 242:	09 83       	std	Y+1, r16	; 0x01
	WriteToNrf(W, RX_PW_P1, val, 1);
 244:	21 e0       	ldi	r18, 0x01	; 1
 246:	ae 01       	movw	r20, r28
 248:	4f 5f       	subi	r20, 0xFF	; 255
 24a:	5f 4f       	sbci	r21, 0xFF	; 255
 24c:	62 e1       	ldi	r22, 0x12	; 18
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	95 df       	rcall	.-214    	; 0x17c <_Z10WriteToNrfhhPhh>
		
	//EN_AA - (auto-acknowledgements) - Transmitter gets automatic response from receiver when successful transmission! (lovely function!)
	//Only works if Transmitter has identical RF_Address on its channel ex: RX_ADDR_P0 = TX_ADDR
	val[0]=0x03;	//Set value
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	89 83       	std	Y+1, r24	; 0x01
	WriteToNrf(W, EN_AA, val, 1);	//W=write mode, EN_AA=register to write to, val=data to write, 1 = number of data bytes.
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	ae 01       	movw	r20, r28
 25a:	4f 5f       	subi	r20, 0xFF	; 255
 25c:	5f 4f       	sbci	r21, 0xFF	; 255
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	8c df       	rcall	.-232    	; 0x17c <_Z10WriteToNrfhhPhh>
	
	//Sets number of retries and retry delay
	val[0]=0x2F;	//0b0010 00011 "2" sets it up to 750uS delay between every retry (at least 500us at 250kbps and if payload >5bytes in 1Mbps, and if payload >15byte in 2Mbps) "F" is number of retries (1-15, now 15)
 264:	8f e2       	ldi	r24, 0x2F	; 47
 266:	89 83       	std	Y+1, r24	; 0x01
	WriteToNrf(W, SETUP_RETR, val, 1);
 268:	21 e0       	ldi	r18, 0x01	; 1
 26a:	ae 01       	movw	r20, r28
 26c:	4f 5f       	subi	r20, 0xFF	; 255
 26e:	5f 4f       	sbci	r21, 0xFF	; 255
 270:	64 e0       	ldi	r22, 0x04	; 4
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	83 df       	rcall	.-250    	; 0x17c <_Z10WriteToNrfhhPhh>
	
	////Choose number of enabled data pipes (1-5)
	val[0]=0x0F;
 276:	8f e0       	ldi	r24, 0x0F	; 15
 278:	89 83       	std	Y+1, r24	; 0x01
	WriteToNrf(W, EN_RXADDR, val, 1); //enable data pipe 0
 27a:	21 e0       	ldi	r18, 0x01	; 1
 27c:	ae 01       	movw	r20, r28
 27e:	4f 5f       	subi	r20, 0xFF	; 255
 280:	5f 4f       	sbci	r21, 0xFF	; 255
 282:	62 e0       	ldi	r22, 0x02	; 2
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	7a df       	rcall	.-268    	; 0x17c <_Z10WriteToNrfhhPhh>
	//RF_Address width setup (how many bytes is the receiver address, the more the merrier 1-5)
	//val[0]=0x03;
	//WriteToNrf(W, SETUP_AW, val, 1); //0b0000 00011 5 bytes RF_Address
	
	//RF setup	- choose power mode and data speed. Here is the difference with the (+) version!!!
	val[0]=0x07;
 288:	87 e0       	ldi	r24, 0x07	; 7
 28a:	89 83       	std	Y+1, r24	; 0x01
	WriteToNrf(W, RF_SETUP, val, 1); //00000111 bit 3="0" 1Mbps=longer range, bit 2-1 power mode ("11" = -0db; 00 = -18db)
 28c:	21 e0       	ldi	r18, 0x01	; 1
 28e:	ae 01       	movw	r20, r28
 290:	4f 5f       	subi	r20, 0xFF	; 255
 292:	5f 4f       	sbci	r21, 0xFF	; 255
 294:	66 e0       	ldi	r22, 0x06	; 6
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	71 df       	rcall	.-286    	; 0x17c <_Z10WriteToNrfhhPhh>
	
	//RX RF_Adress setup 5 byte - Set Receiver Address (set RX_ADDR_P0 = TX_ADDR if EN_AA is enabled!!!)
	int i;
	for(i=0; i<5; i++)
	{
		val[i]=0x55;	//0x58 x 5 to get a long secure address
 29a:	85 e5       	ldi	r24, 0x55	; 85
 29c:	89 83       	std	Y+1, r24	; 0x01
 29e:	8a 83       	std	Y+2, r24	; 0x02
 2a0:	8b 83       	std	Y+3, r24	; 0x03
 2a2:	8c 83       	std	Y+4, r24	; 0x04
 2a4:	8d 83       	std	Y+5, r24	; 0x05
	}
	WriteToNrf(W, RX_ADDR_P0, val, 5); //0b0010 1010 write registry
 2a6:	25 e0       	ldi	r18, 0x05	; 5
 2a8:	ae 01       	movw	r20, r28
 2aa:	4f 5f       	subi	r20, 0xFF	; 255
 2ac:	5f 4f       	sbci	r21, 0xFF	; 255
 2ae:	6a e0       	ldi	r22, 0x0A	; 10
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	64 df       	rcall	.-312    	; 0x17c <_Z10WriteToNrfhhPhh>
	//Since we chose pipe 0 on EN_RXADDR we give this address to that channel.
	
	//Here you can give different addresses to different channels (if they are enabled in EN_RXADDR) to listen on several different transmitters	//RX RF_Adress setup 5 byte - Set Receiver Address (set RX_ADDR_P0 = TX_ADDR if EN_AA is enabled!!!)
	for(i=0; i<5; i++)
	{
		val[i]=0x12;	//0x12 x 5 to get a long secure address
 2b4:	12 e1       	ldi	r17, 0x12	; 18
 2b6:	19 83       	std	Y+1, r17	; 0x01
 2b8:	1a 83       	std	Y+2, r17	; 0x02
 2ba:	1b 83       	std	Y+3, r17	; 0x03
 2bc:	1c 83       	std	Y+4, r17	; 0x04
 2be:	1d 83       	std	Y+5, r17	; 0x05
	}
	WriteToNrf(W, RX_ADDR_P1, val, 5); //0b0010 1010 write registry
 2c0:	25 e0       	ldi	r18, 0x05	; 5
 2c2:	ae 01       	movw	r20, r28
 2c4:	4f 5f       	subi	r20, 0xFF	; 255
 2c6:	5f 4f       	sbci	r21, 0xFF	; 255
 2c8:	6b e0       	ldi	r22, 0x0B	; 11
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	57 df       	rcall	.-338    	; 0x17c <_Z10WriteToNrfhhPhh>
	//Here you can give different addresses to different channels (if they are enabled in EN_RXADDR) to listen on several different transmitters
	
	//TX RF_Adress setup 5 byte -  Set Transmitter address (not used in a receiver but can be set anyway)
	for(i=0; i<5; i++)
	{
		val[i]=0x58;	//0x58 x 5 same on the receiver chip and the RX-RF_Address above if EN_AA is enabled!!!
 2ce:	88 e5       	ldi	r24, 0x58	; 88
 2d0:	89 83       	std	Y+1, r24	; 0x01
 2d2:	8a 83       	std	Y+2, r24	; 0x02
 2d4:	8b 83       	std	Y+3, r24	; 0x03
 2d6:	8c 83       	std	Y+4, r24	; 0x04
 2d8:	8d 83       	std	Y+5, r24	; 0x05
	}
	WriteToNrf(W, TX_ADDR, val, 5);
 2da:	25 e0       	ldi	r18, 0x05	; 5
 2dc:	ae 01       	movw	r20, r28
 2de:	4f 5f       	subi	r20, 0xFF	; 255
 2e0:	5f 4f       	sbci	r21, 0xFF	; 255
 2e2:	60 e1       	ldi	r22, 0x10	; 16
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	4a df       	rcall	.-364    	; 0x17c <_Z10WriteToNrfhhPhh>
	
	//RF channel setup - choose frequency 2,400 - 2,527GHz 1MHz/step
	val[0]=0x05;
 2e8:	09 83       	std	Y+1, r16	; 0x01
	WriteToNrf(W, RF_CH, val, 1); //RF channel registry 0b0000 0001 = 2,401GHz (same on TX and RX)
 2ea:	21 e0       	ldi	r18, 0x01	; 1
 2ec:	ae 01       	movw	r20, r28
 2ee:	4f 5f       	subi	r20, 0xFF	; 255
 2f0:	5f 4f       	sbci	r21, 0xFF	; 255
 2f2:	65 e0       	ldi	r22, 0x05	; 5
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	42 df       	rcall	.-380    	; 0x17c <_Z10WriteToNrfhhPhh>
	
	//Here you can give different addresses to different channels (if they are enabled in EN_RXADDR) to listen on several different transmitters	//RX RF_Adress setup 5 byte - Set Receiver Address (set RX_ADDR_P0 = TX_ADDR if EN_AA is enabled!!!)
	for(i=0; i<5; i++)
	{
		val[i]=0x12;	//0x12 x 5 to get a long secure address
 2f8:	19 83       	std	Y+1, r17	; 0x01
 2fa:	1a 83       	std	Y+2, r17	; 0x02
 2fc:	1b 83       	std	Y+3, r17	; 0x03
 2fe:	1c 83       	std	Y+4, r17	; 0x04
 300:	1d 83       	std	Y+5, r17	; 0x05
	}
	WriteToNrf(W, RX_ADDR_P1, val, 5); //0b0010 1010 write registry
 302:	25 e0       	ldi	r18, 0x05	; 5
 304:	ae 01       	movw	r20, r28
 306:	4f 5f       	subi	r20, 0xFF	; 255
 308:	5f 4f       	sbci	r21, 0xFF	; 255
 30a:	6b e0       	ldi	r22, 0x0B	; 11
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	36 df       	rcall	.-404    	; 0x17c <_Z10WriteToNrfhhPhh>
	//Since we chose pipe 0 on EN_RXADDR we give this address to that channel.
	//Here you can give different addresses to different channels (if they are enabled in EN_RXADDR) to listen on several different transmitters
	
	//CONFIG reg setup - Now it's time to boot up the nRF and choose if it's supposed to be a transmitter or receiver
	val[0]=0x7D;  //0b0000 1110 - bit 0="0":transmitter bit 0="1":Receiver, bit 1="1"power up,
 310:	8d e7       	ldi	r24, 0x7D	; 125
 312:	89 83       	std	Y+1, r24	; 0x01
					//bit 4="1": mask_Max_RT i.e. IRQ-interrupt is not triggered if transmission failed.
	WriteToNrf(W, CONFIG, val, 1);
 314:	21 e0       	ldi	r18, 0x01	; 1
 316:	ae 01       	movw	r20, r28
 318:	4f 5f       	subi	r20, 0xFF	; 255
 31a:	5f 4f       	sbci	r21, 0xFF	; 255
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	2d df       	rcall	.-422    	; 0x17c <_Z10WriteToNrfhhPhh>
 322:	87 ea       	ldi	r24, 0xA7	; 167
 324:	91 e6       	ldi	r25, 0x61	; 97
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <_Z13nrf24L01_initv+0x124>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <_Z13nrf24L01_initv+0x12a>
 32c:	00 00       	nop
	
	//device need 1.5ms to reach standby mode
	_delay_ms(100);
	
	//sei();
}
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	0f 90       	pop	r0
 336:	0f 90       	pop	r0
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	1f 91       	pop	r17
 33e:	0f 91       	pop	r16
 340:	08 95       	ret

00000342 <_Z16transmit_payloadPh>:

void transmit_payload(uint8_t * W_buff)
{
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	ec 01       	movw	r28, r24
	WriteToNrf(R, FLUSH_TX, W_buff, 0); //Sends 0xE1 to flush the registry from old data! W_BUFF[] is only there because an array has to be called with an array..
 348:	20 e0       	ldi	r18, 0x00	; 0
 34a:	ac 01       	movw	r20, r24
 34c:	61 ee       	ldi	r22, 0xE1	; 225
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	15 df       	rcall	.-470    	; 0x17c <_Z10WriteToNrfhhPhh>
	WriteToNrf(R, W_TX_PAYLOAD, W_buff, 5);	//Sends the data in W_buff to the nRF
 352:	25 e0       	ldi	r18, 0x05	; 5
 354:	ae 01       	movw	r20, r28
 356:	60 ea       	ldi	r22, 0xA0	; 160
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	10 df       	rcall	.-480    	; 0x17c <_Z10WriteToNrfhhPhh>
 35c:	83 ec       	ldi	r24, 0xC3	; 195
 35e:	99 e0       	ldi	r25, 0x09	; 9
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <_Z16transmit_payloadPh+0x1e>
 364:	00 c0       	rjmp	.+0      	; 0x366 <_Z16transmit_payloadPh+0x24>
 366:	00 00       	nop
	
	//sei();	//enable global interrupt
	//USART_Transmit(GetReg(STATUS));
	
	_delay_ms(10);		//Needs a 10ms delay to work after loading the nRF with the payload for some reason.
	SETBIT(PORTB, 1);	//CE high=transmit the data
 368:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36a:	96 ea       	ldi	r25, 0xA6	; 166
 36c:	9a 95       	dec	r25
 36e:	f1 f7       	brne	.-4      	; 0x36c <_Z16transmit_payloadPh+0x2a>
 370:	00 c0       	rjmp	.+0      	; 0x372 <_Z16transmit_payloadPh+0x30>
	_delay_us(500);		//delay at least 10us
	CLEARBIT(PORTB, 1);	//CE low=stop transmitting
 372:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 374:	83 ec       	ldi	r24, 0xC3	; 195
 376:	99 e0       	ldi	r25, 0x09	; 9
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <_Z16transmit_payloadPh+0x36>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <_Z16transmit_payloadPh+0x3c>
 37e:	00 00       	nop
	_delay_ms(10);		//long delay again before proceeding.
	
	//cli();	//Disable global interrupt
	
}
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	08 95       	ret

00000386 <_Z5resetv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 386:	82 e1       	ldi	r24, 0x12	; 18
 388:	8a 95       	dec	r24
 38a:	f1 f7       	brne	.-4      	; 0x388 <_Z5resetv+0x2>
 38c:	00 00       	nop

//Working tested 2/23/2015 12:28 PM.
void reset(void)
{
	_delay_us(55);
	CLEARBIT(PORTB, 2);	//CSN low
 38e:	2a 98       	cbi	0x05, 2	; 5
 390:	82 e1       	ldi	r24, 0x12	; 18
 392:	8a 95       	dec	r24
 394:	f1 f7       	brne	.-4      	; 0x392 <_Z5resetv+0xc>
 396:	00 00       	nop
	_delay_us(55);
	WriteByteSPI(W_REGISTER + STATUS);	//write to status register
 398:	87 e2       	ldi	r24, 0x27	; 39
 39a:	d6 de       	rcall	.-596    	; 0x148 <_Z12WriteByteSPIh>
 39c:	83 e0       	ldi	r24, 0x03	; 3
 39e:	8a 95       	dec	r24
 3a0:	f1 f7       	brne	.-4      	; 0x39e <_Z5resetv+0x18>
 3a2:	00 00       	nop
	_delay_us(10);
	WriteByteSPI(0x70);	//reset all irq in status register
 3a4:	80 e7       	ldi	r24, 0x70	; 112
 3a6:	d0 de       	rcall	.-608    	; 0x148 <_Z12WriteByteSPIh>
 3a8:	83 e0       	ldi	r24, 0x03	; 3
 3aa:	8a 95       	dec	r24
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <_Z5resetv+0x24>
 3ae:	00 00       	nop
	_delay_us(10);
	SETBIT(PORTB, 2);	//CSN IR_High
 3b0:	2a 9a       	sbi	0x05, 2	; 5
 3b2:	08 95       	ret

000003b4 <_Z12SendHexiByteh>:
* End of code used for NRF.
*/


void SendHexiByte(uint8_t byte)
{
 3b4:	cf 93       	push	r28
	char upper = (byte & 0b11110000 );
	char lower = (byte & 0b00001111 );
 3b6:	c8 2f       	mov	r28, r24
 3b8:	cf 70       	andi	r28, 0x0F	; 15
	
	upper = ((upper >> 4) & 0b00001111);
 3ba:	82 95       	swap	r24
 3bc:	8f 70       	andi	r24, 0x0F	; 15
	
	if(upper <10)
 3be:	8a 30       	cpi	r24, 0x0A	; 10
 3c0:	18 f4       	brcc	.+6      	; 0x3c8 <_Z12SendHexiByteh+0x14>
	{
		USART_SendByte(upper+'0');
 3c2:	80 5d       	subi	r24, 0xD0	; 208
 3c4:	ab de       	rcall	.-682    	; 0x11c <_Z14USART_SendByteh>
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <_Z12SendHexiByteh+0x18>
	}
	else
	{
		USART_SendByte((upper-10) + 'A');
 3c8:	89 5c       	subi	r24, 0xC9	; 201
 3ca:	a8 de       	rcall	.-688    	; 0x11c <_Z14USART_SendByteh>
	}
	if(lower <10)
 3cc:	ca 30       	cpi	r28, 0x0A	; 10
 3ce:	20 f4       	brcc	.+8      	; 0x3d8 <_Z12SendHexiByteh+0x24>
	{
		USART_SendByte(lower+'0');
 3d0:	80 e3       	ldi	r24, 0x30	; 48
 3d2:	8c 0f       	add	r24, r28
 3d4:	a3 de       	rcall	.-698    	; 0x11c <_Z14USART_SendByteh>
 3d6:	03 c0       	rjmp	.+6      	; 0x3de <_Z12SendHexiByteh+0x2a>
	}
	else
	{
		USART_SendByte((lower-10) + 'A');
 3d8:	87 e3       	ldi	r24, 0x37	; 55
 3da:	8c 0f       	add	r24, r28
 3dc:	9f de       	rcall	.-706    	; 0x11c <_Z14USART_SendByteh>
	}
}
 3de:	cf 91       	pop	r28
 3e0:	08 95       	ret

000003e2 <_Z13SendHexiAraryPhi>:

void SendHexiArary(uint8_t *bytes, int length)
{
 3e2:	0f 93       	push	r16
 3e4:	1f 93       	push	r17
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
	int i = 0;
	for(i=0;i<length;i++)
 3ea:	16 16       	cp	r1, r22
 3ec:	17 06       	cpc	r1, r23
 3ee:	4c f4       	brge	.+18     	; 0x402 <_Z13SendHexiAraryPhi+0x20>
 3f0:	ec 01       	movw	r28, r24
 3f2:	8c 01       	movw	r16, r24
 3f4:	06 0f       	add	r16, r22
 3f6:	17 1f       	adc	r17, r23
	{
		SendHexiByte(bytes[i]);
 3f8:	89 91       	ld	r24, Y+
 3fa:	dc df       	rcall	.-72     	; 0x3b4 <_Z12SendHexiByteh>
}

void SendHexiArary(uint8_t *bytes, int length)
{
	int i = 0;
	for(i=0;i<length;i++)
 3fc:	c0 17       	cp	r28, r16
 3fe:	d1 07       	cpc	r29, r17
 400:	d9 f7       	brne	.-10     	; 0x3f8 <_Z13SendHexiAraryPhi+0x16>
	{
		SendHexiByte(bytes[i]);
	}
}
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	1f 91       	pop	r17
 408:	0f 91       	pop	r16
 40a:	08 95       	ret

0000040c <main>:





int main(void){
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	00 d0       	rcall	.+0      	; 0x412 <main+0x6>
 412:	00 d0       	rcall	.+0      	; 0x414 <main+0x8>
 414:	1f 92       	push	r1
 416:	cd b7       	in	r28, 0x3d	; 61
 418:	de b7       	in	r29, 0x3e	; 62
/*
* Initializes the head and tail state for the ring buffer
*/
void initCircBuff(volatile CircBuff_t *cBuff)
{
	cBuff->Head = 0; //Points to the first valid byte in the buffer
 41a:	10 92 60 01 	sts	0x0160, r1
	cBuff->Tail = 1; //points to next empty byte
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	80 93 61 01 	sts	0x0161, r24
	cBuff->OverRun = 0; //true false overrun
 424:	10 92 63 01 	sts	0x0163, r1
 428:	10 92 62 01 	sts	0x0162, r1



int main(void){
   initCircBuff(&rBuff);
   USART_Init();  // Initialize USART
 42c:	65 de       	rcall	.-822    	; 0xf8 <_Z10USART_Initv>
   Led_init();    // init LEDs for testing
 42e:	7e de       	rcall	.-772    	; 0x12c <_Z8Led_initv>
   InitSPI();
 430:	80 de       	rcall	.-768    	; 0x132 <_Z7InitSPIv>
   nrf24L01_init();
 432:	e7 de       	rcall	.-562    	; 0x202 <_Z13nrf24L01_initv>
   value = 'A'; //0x41;    
 434:	81 e4       	ldi	r24, 0x41	; 65
 436:	80 93 64 01 	sts	0x0164, r24
   PORTB |= 0x01; // 0 = LED on
 43a:	28 9a       	sbi	0x05, 0	; 5
   uint8_t packet[5];
   
   int i;
   for(i=0;i<5;i++)
   {
	   packet[i] ='H';
 43c:	88 e4       	ldi	r24, 0x48	; 72
 43e:	89 83       	std	Y+1, r24	; 0x01
 440:	8a 83       	std	Y+2, r24	; 0x02
 442:	8b 83       	std	Y+3, r24	; 0x03
 444:	8c 83       	std	Y+4, r24	; 0x04
 446:	8d 83       	std	Y+5, r24	; 0x05
	else
	{
		PORTB &= (~(0x01));
	}
			 
	if((rBuff.Head+1)%BUFF_SIZE != rBuff.Tail)
 448:	0f 2e       	mov	r0, r31
 44a:	f0 e6       	ldi	r31, 0x60	; 96
 44c:	ef 2e       	mov	r14, r31
 44e:	f1 e0       	ldi	r31, 0x01	; 1
 450:	ff 2e       	mov	r15, r31
 452:	f0 2d       	mov	r31, r0
 454:	01 e6       	ldi	r16, 0x61	; 97
 456:	11 e0       	ldi	r17, 0x01	; 1
	   packet[i] ='H';
   }
   
   for(;;){    // Repeat indefinitely
             
	if(value >= 'A' && value <= 'J')
 458:	80 91 64 01 	lds	r24, 0x0164
 45c:	81 34       	cpi	r24, 0x41	; 65
 45e:	08 f4       	brcc	.+2      	; 0x462 <main+0x56>
 460:	5e c0       	rjmp	.+188    	; 0x51e <__stack+0x1f>
 462:	80 91 64 01 	lds	r24, 0x0164
 466:	8b 34       	cpi	r24, 0x4B	; 75
 468:	08 f4       	brcc	.+2      	; 0x46c <main+0x60>
 46a:	51 c0       	rjmp	.+162    	; 0x50e <__stack+0xf>
 46c:	58 c0       	rjmp	.+176    	; 0x51e <__stack+0x1f>
		SendHexiByte(GetReg(value - 'A'));
		value = 0x00;
	}
	else if(value == 'K')
	{
		SendHexiArary(WriteToNrf(R, TX_ADDR, packet, 5),5);
 46e:	25 e0       	ldi	r18, 0x05	; 5
 470:	ae 01       	movw	r20, r28
 472:	4f 5f       	subi	r20, 0xFF	; 255
 474:	5f 4f       	sbci	r21, 0xFF	; 255
 476:	60 e1       	ldi	r22, 0x10	; 16
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	80 de       	rcall	.-768    	; 0x17c <_Z10WriteToNrfhhPhh>
 47c:	65 e0       	ldi	r22, 0x05	; 5
 47e:	70 e0       	ldi	r23, 0x00	; 0
 480:	b0 df       	rcall	.-160    	; 0x3e2 <_Z13SendHexiAraryPhi>
		value = 0x0;
 482:	10 92 64 01 	sts	0x0164, r1
 486:	30 c0       	rjmp	.+96     	; 0x4e8 <main+0xdc>
	}
	else if(value == 'L')
 488:	80 91 64 01 	lds	r24, 0x0164
 48c:	8c 34       	cpi	r24, 0x4C	; 76
 48e:	69 f4       	brne	.+26     	; 0x4aa <main+0x9e>
	{
		SendHexiArary(WriteToNrf(R, RX_ADDR_P1, packet, 5),5);
 490:	25 e0       	ldi	r18, 0x05	; 5
 492:	ae 01       	movw	r20, r28
 494:	4f 5f       	subi	r20, 0xFF	; 255
 496:	5f 4f       	sbci	r21, 0xFF	; 255
 498:	6b e0       	ldi	r22, 0x0B	; 11
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	6f de       	rcall	.-802    	; 0x17c <_Z10WriteToNrfhhPhh>
 49e:	65 e0       	ldi	r22, 0x05	; 5
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	9f df       	rcall	.-194    	; 0x3e2 <_Z13SendHexiAraryPhi>
		value = 0x0;
 4a4:	10 92 64 01 	sts	0x0164, r1
 4a8:	1f c0       	rjmp	.+62     	; 0x4e8 <main+0xdc>
	}
	else if (value == 'M')
 4aa:	80 91 64 01 	lds	r24, 0x0164
 4ae:	8d 34       	cpi	r24, 0x4D	; 77
 4b0:	41 f4       	brne	.+16     	; 0x4c2 <main+0xb6>
	{
		transmit_payload(packet);
 4b2:	ce 01       	movw	r24, r28
 4b4:	01 96       	adiw	r24, 0x01	; 1
 4b6:	45 df       	rcall	.-374    	; 0x342 <_Z16transmit_payloadPh>
		SendHexiByte(0xFF);
 4b8:	8f ef       	ldi	r24, 0xFF	; 255
 4ba:	7c df       	rcall	.-264    	; 0x3b4 <_Z12SendHexiByteh>
		value = 0x0;
 4bc:	10 92 64 01 	sts	0x0164, r1
 4c0:	13 c0       	rjmp	.+38     	; 0x4e8 <main+0xdc>
	}
	else if (value == 'N')
 4c2:	80 91 64 01 	lds	r24, 0x0164
 4c6:	8e 34       	cpi	r24, 0x4E	; 78
 4c8:	31 f4       	brne	.+12     	; 0x4d6 <main+0xca>
	{
		reset();
 4ca:	5d df       	rcall	.-326    	; 0x386 <_Z5resetv>
		SendHexiByte(0xFF);
 4cc:	8f ef       	ldi	r24, 0xFF	; 255
 4ce:	72 df       	rcall	.-284    	; 0x3b4 <_Z12SendHexiByteh>
		value = 0x0;
 4d0:	10 92 64 01 	sts	0x0164, r1
 4d4:	09 c0       	rjmp	.+18     	; 0x4e8 <main+0xdc>
	}
	else if(value >= 'O' && value <= 'Q')
 4d6:	80 91 64 01 	lds	r24, 0x0164
 4da:	8f 34       	cpi	r24, 0x4F	; 79
 4dc:	70 f1       	brcs	.+92     	; 0x53a <__stack+0x3b>
 4de:	80 91 64 01 	lds	r24, 0x0164
 4e2:	82 35       	cpi	r24, 0x52	; 82
 4e4:	10 f1       	brcs	.+68     	; 0x52a <__stack+0x2b>
 4e6:	29 c0       	rjmp	.+82     	; 0x53a <__stack+0x3b>
	else
	{
		PORTB &= (~(0x01));
	}
			 
	if((rBuff.Head+1)%BUFF_SIZE != rBuff.Tail)
 4e8:	f7 01       	movw	r30, r14
 4ea:	20 81       	ld	r18, Z
 4ec:	f8 01       	movw	r30, r16
 4ee:	80 81       	ld	r24, Z
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	2f 5f       	subi	r18, 0xFF	; 255
 4f4:	3f 4f       	sbci	r19, 0xFF	; 255
 4f6:	2f 73       	andi	r18, 0x3F	; 63
 4f8:	30 78       	andi	r19, 0x80	; 128
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	28 17       	cp	r18, r24
 4fe:	39 07       	cpc	r19, r25
 500:	09 f4       	brne	.+2      	; 0x504 <__stack+0x5>
 502:	aa cf       	rjmp	.-172    	; 0x458 <main+0x4c>
	{
		USART_SendByte(readCircbuff(&rBuff));  // send value
 504:	80 e2       	ldi	r24, 0x20	; 32
 506:	91 e0       	ldi	r25, 0x01	; 1
 508:	a6 dd       	rcall	.-1204   	; 0x56 <_Z12readCircbuffPV10CircBuff_t>
 50a:	08 de       	rcall	.-1008   	; 0x11c <_Z14USART_SendByteh>
 50c:	a5 cf       	rjmp	.-182    	; 0x458 <main+0x4c>
   
   for(;;){    // Repeat indefinitely
             
	if(value >= 'A' && value <= 'J')
	{
		SendHexiByte(GetReg(value - 'A'));
 50e:	80 91 64 01 	lds	r24, 0x0164
 512:	81 54       	subi	r24, 0x41	; 65
 514:	1f de       	rcall	.-962    	; 0x154 <_Z6GetRegh>
 516:	4e df       	rcall	.-356    	; 0x3b4 <_Z12SendHexiByteh>
		value = 0x00;
 518:	10 92 64 01 	sts	0x0164, r1
 51c:	e5 cf       	rjmp	.-54     	; 0x4e8 <main+0xdc>
	}
	else if(value == 'K')
 51e:	80 91 64 01 	lds	r24, 0x0164
 522:	8b 34       	cpi	r24, 0x4B	; 75
 524:	09 f0       	breq	.+2      	; 0x528 <__stack+0x29>
 526:	b0 cf       	rjmp	.-160    	; 0x488 <main+0x7c>
 528:	a2 cf       	rjmp	.-188    	; 0x46e <main+0x62>
		value = 0x0;
	}
	else if(value >= 'O' && value <= 'Q')
	{
		//for rx_pw
		SendHexiByte(GetReg((value - 'O')+ 0X11 ));
 52a:	80 91 64 01 	lds	r24, 0x0164
 52e:	8e 53       	subi	r24, 0x3E	; 62
 530:	11 de       	rcall	.-990    	; 0x154 <_Z6GetRegh>
 532:	40 df       	rcall	.-384    	; 0x3b4 <_Z12SendHexiByteh>
		value = 0x00;
 534:	10 92 64 01 	sts	0x0164, r1
 538:	d7 cf       	rjmp	.-82     	; 0x4e8 <main+0xdc>
	}
	else
	{
		PORTB &= (~(0x01));
 53a:	28 98       	cbi	0x05, 0	; 5
 53c:	d5 cf       	rjmp	.-86     	; 0x4e8 <main+0xdc>

0000053e <_exit>:
 53e:	f8 94       	cli

00000540 <__stop_program>:
 540:	ff cf       	rjmp	.-2      	; 0x540 <__stop_program>
