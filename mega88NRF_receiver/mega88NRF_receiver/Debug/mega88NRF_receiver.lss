
mega88NRF_receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000306  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000020  00800100  00800100  0000037a  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000037a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000060  00000000  00000000  000003aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000092f  00000000  00000000  0000040a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000024c  00000000  00000000  00000d39  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002c0  00000000  00000000  00000f85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e8  00000000  00000000  00001248  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002d5  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000367  00000000  00000000  00001605  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  0000196c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a0 32       	cpi	r26, 0x20	; 32
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	14 d1       	rcall	.+552    	; 0x27a <main>
  52:	57 c1       	rjmp	.+686    	; 0x302 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <_Z6InitIOv>:
/*
* Initializes LED pins for output
*/
void InitIO()
{
	DDRC |= (1<<DDC5) | (1<<DDC4);
  56:	87 b1       	in	r24, 0x07	; 7
  58:	80 63       	ori	r24, 0x30	; 48
  5a:	87 b9       	out	0x07, r24	; 7
  5c:	08 95       	ret

0000005e <_Z7InitSPIv>:
* NRF usage functions come after this.
*/

void InitSPI(void) {
	//Clear port B SPI pins for init
	DDRB &= ~((1<<DDB3)|(1<<DDB4)|(1<<DDB2)|(1<<DDB5));
  5e:	84 b1       	in	r24, 0x04	; 4
  60:	83 7c       	andi	r24, 0xC3	; 195
  62:	84 b9       	out	0x04, r24	; 4
	
	//Set SCK (PB5), MOSI (PB3) , CSN (SS & PB2) & C  as outport
	//OBS!!! Has to be set before SPI-Enable below
	DDRB |= (1<<DDB5) | (1<<DDB3) | (1<<DDB2) |(1<<DDB1);
  64:	84 b1       	in	r24, 0x04	; 4
  66:	8e 62       	ori	r24, 0x2E	; 46
  68:	84 b9       	out	0x04, r24	; 4
	(0<<SPIE)|              // SPI Interrupt Enable
	(0<<DORD)|              // Data Order (0:MSB first / 1:LSB first)
	(1<<MSTR)|              // Master/Slave select
	(0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate
	(0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
	(0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)
  6a:	80 e5       	ldi	r24, 0x50	; 80
  6c:	8c bd       	out	0x2c, r24	; 44
	
	SPSR |= (1<<SPI2X);
  6e:	8d b5       	in	r24, 0x2d	; 45
  70:	81 60       	ori	r24, 0x01	; 1
  72:	8d bd       	out	0x2d, r24	; 45
	
	//PORTB |= (1 <<2);
	SETBIT(PORTB, 2);	//CSN IR_High to start with, nothing to be sent to the nRF yet!
  74:	2a 9a       	sbi	0x05, 2	; 5
	//PORTB &= (~(1<<1));
	CLEARBIT(PORTB, 1);	//CE low to start with, nothing to send/receive yet!
  76:	29 98       	cbi	0x05, 1	; 5
  78:	08 95       	ret

0000007a <_Z12WriteByteSPIh>:

//Sends and receives a byte through SPI
uint8_t WriteByteSPI(uint8_t cData)
{
	//Load byte to Data register
	SPDR = cData;
  7a:	8e bd       	out	0x2e, r24	; 46
	
	/* Wait for transmission complete */
	while((SPSR & (1<<SPIF))==0);
  7c:	0d b4       	in	r0, 0x2d	; 45
  7e:	07 fe       	sbrs	r0, 7
  80:	fd cf       	rjmp	.-6      	; 0x7c <_Z12WriteByteSPIh+0x2>
	
	//Return what's received from the nRF
	return SPDR;
  82:	8e b5       	in	r24, 0x2e	; 46
}
  84:	08 95       	ret

00000086 <_Z6GetRegh>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	93 e0       	ldi	r25, 0x03	; 3
  88:	9a 95       	dec	r25
  8a:	f1 f7       	brne	.-4      	; 0x88 <_Z6GetRegh+0x2>
  8c:	00 00       	nop
uint8_t GetReg(uint8_t reg)
{
	//make sure last command was a while ago
	_delay_us(10);
	//PORTB &= (~(1<<2));
	CLEARBIT(PORTB, 2);	//CSN low - nRF starts to listen for command
  8e:	2a 98       	cbi	0x05, 2	; 5
  90:	93 e0       	ldi	r25, 0x03	; 3
  92:	9a 95       	dec	r25
  94:	f1 f7       	brne	.-4      	; 0x92 <_Z6GetRegh+0xc>
  96:	00 00       	nop
	_delay_us(10);
	WriteByteSPI(R_REGISTER + reg);	//R_Register = set the nRF to reading mode, "reg" = this register well be read back
  98:	f0 df       	rcall	.-32     	; 0x7a <_Z12WriteByteSPIh>
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	8a 95       	dec	r24
  9e:	f1 f7       	brne	.-4      	; 0x9c <_Z6GetRegh+0x16>
  a0:	00 00       	nop
	_delay_us(10);
	reg = WriteByteSPI(NOP);	//Send NOP (dummy byte) once to receive back the first byte in the "reg" register
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	ea df       	rcall	.-44     	; 0x7a <_Z12WriteByteSPIh>
  a6:	93 e0       	ldi	r25, 0x03	; 3
  a8:	9a 95       	dec	r25
  aa:	f1 f7       	brne	.-4      	; 0xa8 <_Z6GetRegh+0x22>
  ac:	00 00       	nop
	_delay_us(10);
	//PORTB |= (1<<2);
	SETBIT(PORTB, 2);	//CSN Hi - nRF goes back to doing nothing
  ae:	2a 9a       	sbi	0x05, 2	; 5
	return reg;	// Return the read register
}
  b0:	08 95       	ret

000000b2 <_Z10WriteToNrfhhPhh>:

uint8_t *WriteToNrf(uint8_t ReadWrite, uint8_t reg, uint8_t *val, uint8_t antVal)	//tar in "ReadWrite" (W el R), "reg" (ett register), "*val" (en array) & "antVal" (antal integer i variabeln)
{
  b2:	cf 92       	push	r12
  b4:	df 92       	push	r13
  b6:	ef 92       	push	r14
  b8:	ff 92       	push	r15
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	d8 2e       	mov	r13, r24
  c4:	c6 2e       	mov	r12, r22
  c6:	7a 01       	movw	r14, r20
  c8:	02 2f       	mov	r16, r18
	cli();	//disable global interrupt
  ca:	f8 94       	cli
	
	if (ReadWrite == W)	//if "W" then you want to write to the nRF (read mode "R" == 0x00, so skipping that one)
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	d8 12       	cpse	r13, r24
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <_Z10WriteToNrfhhPhh+0x24>
	{
		reg = W_REGISTER + reg;	//ex: reg = EN_AA: 0b0010 0000 + 0b0000 0001 = 0b0010 0001
  d2:	80 e2       	ldi	r24, 0x20	; 32
  d4:	c8 0e       	add	r12, r24
  d6:	85 e0       	ldi	r24, 0x05	; 5
  d8:	8a 95       	dec	r24
  da:	f1 f7       	brne	.-4      	; 0xd8 <_Z10WriteToNrfhhPhh+0x26>
	//Create an array to be returned at the end.
	//Static uint8_t is needed to be able to return an array
	static uint8_t ret[32];
	
	_delay_us(15);		//make sure the last command was a while ago
	CLEARBIT(PORTB, 2);	//CSN low = nRF starts to listen for command
  dc:	2a 98       	cbi	0x05, 2	; 5
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <_Z10WriteToNrfhhPhh+0x2e>
  e4:	00 00       	nop
	_delay_us(10);
	WriteByteSPI(reg);	//set the nRF to Write or read mode of "reg"
  e6:	8c 2d       	mov	r24, r12
  e8:	c8 df       	rcall	.-112    	; 0x7a <_Z12WriteByteSPIh>
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <_Z10WriteToNrfhhPhh+0x3a>
  f0:	00 00       	nop
	_delay_us(10);
	
	int i;
	for(i=0; i<antVal; i++)
  f2:	10 e0       	ldi	r17, 0x00	; 0
  f4:	10 16       	cp	r1, r16
  f6:	11 06       	cpc	r1, r17
  f8:	fc f4       	brge	.+62     	; 0x138 <_Z10WriteToNrfhhPhh+0x86>
  fa:	c0 e0       	ldi	r28, 0x00	; 0
  fc:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (ReadWrite == R && reg != W_TX_PAYLOAD)
  fe:	d1 10       	cpse	r13, r1
 100:	0e c0       	rjmp	.+28     	; 0x11e <_Z10WriteToNrfhhPhh+0x6c>
 102:	80 ea       	ldi	r24, 0xA0	; 160
 104:	c8 16       	cp	r12, r24
 106:	59 f0       	breq	.+22     	; 0x11e <_Z10WriteToNrfhhPhh+0x6c>
		{
			ret[i]=WriteByteSPI(NOP);	//send dummy bytes to read out the data
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	b7 df       	rcall	.-146    	; 0x7a <_Z12WriteByteSPIh>
 10c:	fe 01       	movw	r30, r28
 10e:	e0 50       	subi	r30, 0x00	; 0
 110:	ff 4f       	sbci	r31, 0xFF	; 255
 112:	80 83       	st	Z, r24
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	8a 95       	dec	r24
 118:	f1 f7       	brne	.-4      	; 0x116 <_Z10WriteToNrfhhPhh+0x64>
 11a:	00 00       	nop
 11c:	09 c0       	rjmp	.+18     	; 0x130 <_Z10WriteToNrfhhPhh+0x7e>
 11e:	f7 01       	movw	r30, r14
 120:	ec 0f       	add	r30, r28
 122:	fd 1f       	adc	r31, r29
			_delay_us(10);
		}
		else
		{
			WriteByteSPI(val[i]);	//Send the commands to the nRF once at a time
 124:	80 81       	ld	r24, Z
 126:	a9 df       	rcall	.-174    	; 0x7a <_Z12WriteByteSPIh>
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	8a 95       	dec	r24
 12c:	f1 f7       	brne	.-4      	; 0x12a <_Z10WriteToNrfhhPhh+0x78>
 12e:	00 00       	nop
	_delay_us(10);
	WriteByteSPI(reg);	//set the nRF to Write or read mode of "reg"
	_delay_us(10);
	
	int i;
	for(i=0; i<antVal; i++)
 130:	21 96       	adiw	r28, 0x01	; 1
 132:	c0 17       	cp	r28, r16
 134:	d1 07       	cpc	r29, r17
 136:	1c f3       	brlt	.-58     	; 0xfe <_Z10WriteToNrfhhPhh+0x4c>
		{
			WriteByteSPI(val[i]);	//Send the commands to the nRF once at a time
			_delay_us(10);
		}
	}
	SETBIT(PORTB, 2);	//CSN Hi - nRF goes back to doing nothing.
 138:	2a 9a       	sbi	0x05, 2	; 5
	
	sei(); //enable global interrupt
 13a:	78 94       	sei
	
	return ret;	//return an array
}
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	1f 91       	pop	r17
 146:	0f 91       	pop	r16
 148:	ff 90       	pop	r15
 14a:	ef 90       	pop	r14
 14c:	df 90       	pop	r13
 14e:	cf 90       	pop	r12
 150:	08 95       	ret

00000152 <_Z13nrf24L01_initv>:

//Initializes the nRF.
void nrf24L01_init(void) {
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	00 d0       	rcall	.+0      	; 0x15c <_Z13nrf24L01_initv+0xa>
 15c:	00 d0       	rcall	.+0      	; 0x15e <_Z13nrf24L01_initv+0xc>
 15e:	1f 92       	push	r1
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 164:	87 ea       	ldi	r24, 0xA7	; 167
 166:	91 e6       	ldi	r25, 0x61	; 97
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <_Z13nrf24L01_initv+0x16>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <_Z13nrf24L01_initv+0x1c>
 16e:	00 00       	nop
	_delay_ms(100);	//allow radio to reach power down if shut down
	
	uint8_t val[5];	//An array of integers to send to the *WriteToNrf function
	
	//RF channel setup - choose frequency 2,400 - 2,527GHz 1MHz/step
	val[0]=0x18;
 170:	88 e1       	ldi	r24, 0x18	; 24
 172:	89 83       	std	Y+1, r24	; 0x01
	WriteToNrf(W, RF_CH, val, 1); //RF channel registry 0b0000 0001 = 2,401GHz (same on TX and RX)
 174:	21 e0       	ldi	r18, 0x01	; 1
 176:	ae 01       	movw	r20, r28
 178:	4f 5f       	subi	r20, 0xFF	; 255
 17a:	5f 4f       	sbci	r21, 0xFF	; 255
 17c:	65 e0       	ldi	r22, 0x05	; 5
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	98 df       	rcall	.-208    	; 0xb2 <_Z10WriteToNrfhhPhh>
	
	//EN_AA - (auto-acknowledgements) - Transmitter gets automatic response from receiver when successful transmission! (lovely function!)
	//Only works if Transmitter has identical RF_Address on its channel ex: RX_ADDR_P0 = TX_ADDR
	val[0]=0x3F;	//Set value
 182:	1f e3       	ldi	r17, 0x3F	; 63
 184:	19 83       	std	Y+1, r17	; 0x01
	WriteToNrf(W, EN_AA, val, 1);	//W=write mode, EN_AA=register to write to, val=data to write, 1 = number of data bytes.
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	ae 01       	movw	r20, r28
 18a:	4f 5f       	subi	r20, 0xFF	; 255
 18c:	5f 4f       	sbci	r21, 0xFF	; 255
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	8f df       	rcall	.-226    	; 0xb2 <_Z10WriteToNrfhhPhh>
	
	// payload width setup - 1-32byte (how many bytes to send per transmission)
	val[0]=5;		//Send 5 bytes per package this time (same on receiver and transmitter)
 194:	05 e0       	ldi	r16, 0x05	; 5
 196:	09 83       	std	Y+1, r16	; 0x01
	WriteToNrf(W, RX_PW_P0, val, 1);
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	ae 01       	movw	r20, r28
 19c:	4f 5f       	subi	r20, 0xFF	; 255
 19e:	5f 4f       	sbci	r21, 0xFF	; 255
 1a0:	61 e1       	ldi	r22, 0x11	; 17
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	86 df       	rcall	.-244    	; 0xb2 <_Z10WriteToNrfhhPhh>
	
	// payload width setup - 1-32byte (how many bytes to send per transmission)
	val[0]=5;		//Send 5 bytes per package this time (same on receiver and transmitter)
 1a6:	09 83       	std	Y+1, r16	; 0x01
	WriteToNrf(W, RX_PW_P1, val, 1);
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	ae 01       	movw	r20, r28
 1ac:	4f 5f       	subi	r20, 0xFF	; 255
 1ae:	5f 4f       	sbci	r21, 0xFF	; 255
 1b0:	62 e1       	ldi	r22, 0x12	; 18
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	7e df       	rcall	.-260    	; 0xb2 <_Z10WriteToNrfhhPhh>
	
	//Sets number of retries and retry delay
	val[0]=0x2F;	//0b0010 00011 "2" sets it up to 750uS delay between every retry (at least 500us at 250kbps and if payload >5bytes in 1Mbps, and if payload >15byte in 2Mbps) "F" is number of retries (1-15, now 15)
 1b6:	8f e2       	ldi	r24, 0x2F	; 47
 1b8:	89 83       	std	Y+1, r24	; 0x01
	WriteToNrf(W, SETUP_RETR, val, 1);
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	ae 01       	movw	r20, r28
 1be:	4f 5f       	subi	r20, 0xFF	; 255
 1c0:	5f 4f       	sbci	r21, 0xFF	; 255
 1c2:	64 e0       	ldi	r22, 0x04	; 4
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	75 df       	rcall	.-278    	; 0xb2 <_Z10WriteToNrfhhPhh>
	
	////Choose number of enabled data pipes (1-5)
	val[0]=0x3F;
 1c8:	19 83       	std	Y+1, r17	; 0x01
	WriteToNrf(W, EN_RXADDR, val, 1); //enable data pipe 0
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	ae 01       	movw	r20, r28
 1ce:	4f 5f       	subi	r20, 0xFF	; 255
 1d0:	5f 4f       	sbci	r21, 0xFF	; 255
 1d2:	62 e0       	ldi	r22, 0x02	; 2
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	6d df       	rcall	.-294    	; 0xb2 <_Z10WriteToNrfhhPhh>
	
	//RF_Address width setup (how many bytes is the receiver address, the more the merrier 1-5)
	val[0]=0x03;
 1d8:	83 e0       	ldi	r24, 0x03	; 3
 1da:	89 83       	std	Y+1, r24	; 0x01
	WriteToNrf(W, SETUP_AW, val, 1); //0b0000 00011 5 bytes RF_Address
 1dc:	21 e0       	ldi	r18, 0x01	; 1
 1de:	ae 01       	movw	r20, r28
 1e0:	4f 5f       	subi	r20, 0xFF	; 255
 1e2:	5f 4f       	sbci	r21, 0xFF	; 255
 1e4:	63 e0       	ldi	r22, 0x03	; 3
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	64 df       	rcall	.-312    	; 0xb2 <_Z10WriteToNrfhhPhh>
	
	//RF setup	- choose power mode and data speed. Here is the difference with the (+) version!!!
	val[0]=0x07;
 1ea:	87 e0       	ldi	r24, 0x07	; 7
 1ec:	89 83       	std	Y+1, r24	; 0x01
	WriteToNrf(W, RF_SETUP, val, 1); //00000111 bit 3="0" 1Mbps=longer range, bit 2-1 power mode ("11" = -0db; 00 = -18db)
 1ee:	21 e0       	ldi	r18, 0x01	; 1
 1f0:	ae 01       	movw	r20, r28
 1f2:	4f 5f       	subi	r20, 0xFF	; 255
 1f4:	5f 4f       	sbci	r21, 0xFF	; 255
 1f6:	66 e0       	ldi	r22, 0x06	; 6
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	5b df       	rcall	.-330    	; 0xb2 <_Z10WriteToNrfhhPhh>
	
	//RX RF_Adress setup 5 byte - Set Receiver Address (set RX_ADDR_P0 = TX_ADDR if EN_AA is enabled!!!)
	int i;
	for(i=0; i<5; i++)
	{
		val[i]=0x74;	//0x58 x 5 to get a long secure address
 1fc:	14 e7       	ldi	r17, 0x74	; 116
 1fe:	19 83       	std	Y+1, r17	; 0x01
 200:	1a 83       	std	Y+2, r17	; 0x02
 202:	1b 83       	std	Y+3, r17	; 0x03
 204:	1c 83       	std	Y+4, r17	; 0x04
 206:	1d 83       	std	Y+5, r17	; 0x05
	}
	WriteToNrf(W, RX_ADDR_P0, val, 5); //0b0010 1010 write registry
 208:	25 e0       	ldi	r18, 0x05	; 5
 20a:	ae 01       	movw	r20, r28
 20c:	4f 5f       	subi	r20, 0xFF	; 255
 20e:	5f 4f       	sbci	r21, 0xFF	; 255
 210:	6a e0       	ldi	r22, 0x0A	; 10
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	4e df       	rcall	.-356    	; 0xb2 <_Z10WriteToNrfhhPhh>
	//Since we chose pipe 0 on EN_RXADDR we give this address to that channel.
	
	//RX RF_Adress setup 5 byte - Set Receiver Address (set RX_ADDR_P0 = TX_ADDR if EN_AA is enabled!!!)
	for(i=0; i<5; i++)
	{
		val[i]=0x12;	//0x58 x 5 to get a long secure address
 216:	82 e1       	ldi	r24, 0x12	; 18
 218:	89 83       	std	Y+1, r24	; 0x01
 21a:	8a 83       	std	Y+2, r24	; 0x02
 21c:	8b 83       	std	Y+3, r24	; 0x03
 21e:	8c 83       	std	Y+4, r24	; 0x04
 220:	8d 83       	std	Y+5, r24	; 0x05
	}
	WriteToNrf(W, RX_ADDR_P1, val, 5); //0b0010 1010 write registry
 222:	25 e0       	ldi	r18, 0x05	; 5
 224:	ae 01       	movw	r20, r28
 226:	4f 5f       	subi	r20, 0xFF	; 255
 228:	5f 4f       	sbci	r21, 0xFF	; 255
 22a:	6b e0       	ldi	r22, 0x0B	; 11
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	41 df       	rcall	.-382    	; 0xb2 <_Z10WriteToNrfhhPhh>
	//Since we chose pipe 0 on EN_RXADDR we give this address to that channel.
	
	//TX RF_Adress setup 5 byte -  Set Transmitter address (not used in a receiver but can be set anyway)
	for(i=0; i<5; i++)
	{
		val[i]=0x74;	//0x58 x 5 same on the receiver chip and the RX-RF_Address above if EN_AA is enabled!!!
 230:	19 83       	std	Y+1, r17	; 0x01
 232:	1a 83       	std	Y+2, r17	; 0x02
 234:	1b 83       	std	Y+3, r17	; 0x03
 236:	1c 83       	std	Y+4, r17	; 0x04
 238:	1d 83       	std	Y+5, r17	; 0x05
	}
	WriteToNrf(W, TX_ADDR, val, 5);
 23a:	25 e0       	ldi	r18, 0x05	; 5
 23c:	ae 01       	movw	r20, r28
 23e:	4f 5f       	subi	r20, 0xFF	; 255
 240:	5f 4f       	sbci	r21, 0xFF	; 255
 242:	60 e1       	ldi	r22, 0x10	; 16
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	35 df       	rcall	.-406    	; 0xb2 <_Z10WriteToNrfhhPhh>
	
	//CONFIG reg setup - Now it's time to boot up the nRF and choose if it's supposed to be a transmitter or receiver
	val[0]=0x1F;  //0b0000 1111 - bit 0="0":transmitter bit 0="1":Receiver, bit 1="1"power up,
 248:	8f e1       	ldi	r24, 0x1F	; 31
 24a:	89 83       	std	Y+1, r24	; 0x01
	//bit 4="1": mask_Max_RT i.e. IRQ-interrupt is not triggered if transmission failed.
	WriteToNrf(W, CONFIG, val, 1);
 24c:	21 e0       	ldi	r18, 0x01	; 1
 24e:	ae 01       	movw	r20, r28
 250:	4f 5f       	subi	r20, 0xFF	; 255
 252:	5f 4f       	sbci	r21, 0xFF	; 255
 254:	60 e0       	ldi	r22, 0x00	; 0
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	2c df       	rcall	.-424    	; 0xb2 <_Z10WriteToNrfhhPhh>
 25a:	87 ea       	ldi	r24, 0xA7	; 167
 25c:	91 e6       	ldi	r25, 0x61	; 97
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <_Z13nrf24L01_initv+0x10c>
 262:	00 c0       	rjmp	.+0      	; 0x264 <_Z13nrf24L01_initv+0x112>
 264:	00 00       	nop
	
	//device need 1.5ms to reach standby mode
	_delay_ms(100);
	
	//sei();
}
 266:	0f 90       	pop	r0
 268:	0f 90       	pop	r0
 26a:	0f 90       	pop	r0
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	08 95       	ret

0000027a <main>:
* End of code used for NRF.
*/

int main(void)
{
	InitIO();
 27a:	ed de       	rcall	.-550    	; 0x56 <_Z6InitIOv>
	InitSPI();
 27c:	f0 de       	rcall	.-544    	; 0x5e <_Z7InitSPIv>
	nrf24L01_init();
 27e:	69 df       	rcall	.-302    	; 0x152 <_Z13nrf24L01_initv>
	
	//Toggle on PortC5 LED for status indication
	PORTC |= (1<<DDC5);
 280:	45 9a       	sbi	0x08, 5	; 8
 282:	2f e3       	ldi	r18, 0x3F	; 63
 284:	3d e0       	ldi	r19, 0x0D	; 13
 286:	43 e0       	ldi	r20, 0x03	; 3
 288:	21 50       	subi	r18, 0x01	; 1
 28a:	30 40       	sbci	r19, 0x00	; 0
 28c:	40 40       	sbci	r20, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <main+0xe>
 290:	00 c0       	rjmp	.+0      	; 0x292 <main+0x18>
 292:	00 00       	nop
    {
		//Wait 1 second
        _delay_ms(1000);
		
		//Makes sure that the NRF is connected successfully through SPI
		if(GetReg(STATUS) == 0x0E) {
 294:	87 e0       	ldi	r24, 0x07	; 7
 296:	f7 de       	rcall	.-530    	; 0x86 <_Z6GetRegh>
 298:	8e 30       	cpi	r24, 0x0E	; 14
 29a:	99 f7       	brne	.-26     	; 0x282 <main+0x8>
 29c:	88 e0       	ldi	r24, 0x08	; 8
 29e:	90 e0       	ldi	r25, 0x00	; 0
			int j;
			//Use the LED to let the user know that the nrf is successfully connected.
			for(j=0;j<8;j++)
			{
				PORTC ^= (1<<DDC5);
 2a0:	20 e2       	ldi	r18, 0x20	; 32
 2a2:	38 b1       	in	r19, 0x08	; 8
 2a4:	32 27       	eor	r19, r18
 2a6:	38 b9       	out	0x08, r19	; 8
 2a8:	5f e9       	ldi	r21, 0x9F	; 159
 2aa:	36 e8       	ldi	r19, 0x86	; 134
 2ac:	41 e0       	ldi	r20, 0x01	; 1
 2ae:	51 50       	subi	r21, 0x01	; 1
 2b0:	30 40       	sbci	r19, 0x00	; 0
 2b2:	40 40       	sbci	r20, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0x34>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <main+0x3e>
 2b8:	00 00       	nop
 2ba:	01 97       	sbiw	r24, 0x01	; 1
		
		//Makes sure that the NRF is connected successfully through SPI
		if(GetReg(STATUS) == 0x0E) {
			int j;
			//Use the LED to let the user know that the nrf is successfully connected.
			for(j=0;j<8;j++)
 2bc:	00 97       	sbiw	r24, 0x00	; 0
 2be:	89 f7       	brne	.-30     	; 0x2a2 <main+0x28>
				//Wait half a second
				_delay_ms(500);
			}
			
			//Attempt to receive data.
			SETBIT(PORTB, 1);
 2c0:	29 9a       	sbi	0x05, 1	; 5
			while(1)
			{
				PORTC ^= (1<<DDC5);
 2c2:	c0 e2       	ldi	r28, 0x20	; 32
 2c4:	88 b1       	in	r24, 0x08	; 8
 2c6:	8c 27       	eor	r24, r28
 2c8:	88 b9       	out	0x08, r24	; 8
 2ca:	5f e7       	ldi	r21, 0x7F	; 127
 2cc:	88 e3       	ldi	r24, 0x38	; 56
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	51 50       	subi	r21, 0x01	; 1
 2d2:	80 40       	sbci	r24, 0x00	; 0
 2d4:	90 40       	sbci	r25, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <main+0x56>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <main+0x60>
 2da:	00 00       	nop
				_delay_ms(400);
				PORTC ^= (1<<DDC5);
 2dc:	88 b1       	in	r24, 0x08	; 8
 2de:	8c 27       	eor	r24, r28
 2e0:	88 b9       	out	0x08, r24	; 8
 2e2:	2f e7       	ldi	r18, 0x7F	; 127
 2e4:	38 e3       	ldi	r19, 0x38	; 56
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	21 50       	subi	r18, 0x01	; 1
 2ea:	30 40       	sbci	r19, 0x00	; 0
 2ec:	40 40       	sbci	r20, 0x00	; 0
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <main+0x6e>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <main+0x78>
 2f2:	00 00       	nop
				_delay_ms(400);
				//polls whether or not data has been received.
				if(GetReg(STATUS) != 0x0E)
 2f4:	87 e0       	ldi	r24, 0x07	; 7
 2f6:	c7 de       	rcall	.-626    	; 0x86 <_Z6GetRegh>
 2f8:	8e 30       	cpi	r24, 0x0E	; 14
 2fa:	21 f3       	breq	.-56     	; 0x2c4 <main+0x4a>
				{
					CLEARBIT(PORTB,1);
 2fc:	29 98       	cbi	0x05, 1	; 5
					//toggles led PC4 if data has been received.
					PORTC |= (1<<DDC4);
 2fe:	44 9a       	sbi	0x08, 4	; 8
 300:	ff cf       	rjmp	.-2      	; 0x300 <main+0x86>

00000302 <_exit>:
 302:	f8 94       	cli

00000304 <__stop_program>:
 304:	ff cf       	rjmp	.-2      	; 0x304 <__stop_program>
