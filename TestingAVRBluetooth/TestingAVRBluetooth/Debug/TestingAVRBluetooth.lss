
TestingAVRBluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000192  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000045  00800100  00800100  00000206  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000060  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002ee  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001ea  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000177  00000000  00000000  0000076e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000ec  00000000  00000000  000008e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002b6  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000f0  00000000  00000000  00000c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  00000d7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	3c c0       	rjmp	.+120    	; 0x9e <__vector_18>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a5 34       	cpi	r26, 0x45	; 69
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	71 d0       	rcall	.+226    	; 0x134 <main>
  52:	9d c0       	rjmp	.+314    	; 0x18e <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <_Z12readCircbuffPV10CircBuff_t>:
//Then head is incremented to the next spot
//Wrapping is handled with modulus of BUFF_SIZE
//NO OVERFLOW CHECKING IMPLEMENTED
unsigned char readCircbuff(volatile CircBuff_t *cBuff)
{
	unsigned char readVal = cBuff->Data[cBuff->Head];
  56:	fc 01       	movw	r30, r24
  58:	e0 5c       	subi	r30, 0xC0	; 192
  5a:	ff 4f       	sbci	r31, 0xFF	; 255
  5c:	20 81       	ld	r18, Z
  5e:	dc 01       	movw	r26, r24
  60:	a2 0f       	add	r26, r18
  62:	b1 1d       	adc	r27, r1
  64:	4c 91       	ld	r20, X
	cBuff->Head= (cBuff->Head+1)%BUFF_SIZE;
  66:	20 81       	ld	r18, Z
  68:	30 e0       	ldi	r19, 0x00	; 0
  6a:	2f 5f       	subi	r18, 0xFF	; 255
  6c:	3f 4f       	sbci	r19, 0xFF	; 255
  6e:	2f 73       	andi	r18, 0x3F	; 63
  70:	30 78       	andi	r19, 0x80	; 128
  72:	20 83       	st	Z, r18
	return readVal;
}
  74:	84 2f       	mov	r24, r20
  76:	08 95       	ret

00000078 <_Z13writeCircBuffPV10CircBuff_th>:
//Then tail is incremented by 1
//Wrapping is handled by modulus of BUFF_SIZE
//NO OVERFLOW CHECKING IMPLEMENTED
void writeCircBuff(volatile CircBuff_t *cBuff, unsigned char val)
{
	cBuff->Data[cBuff->Head] = val;
  78:	fc 01       	movw	r30, r24
  7a:	e0 5c       	subi	r30, 0xC0	; 192
  7c:	ff 4f       	sbci	r31, 0xFF	; 255
  7e:	20 81       	ld	r18, Z
  80:	fc 01       	movw	r30, r24
  82:	e2 0f       	add	r30, r18
  84:	f1 1d       	adc	r31, r1
  86:	60 83       	st	Z, r22
	cBuff->Tail = (cBuff->Tail+1)%BUFF_SIZE;
  88:	fc 01       	movw	r30, r24
  8a:	ef 5b       	subi	r30, 0xBF	; 191
  8c:	ff 4f       	sbci	r31, 0xFF	; 255
  8e:	20 81       	ld	r18, Z
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	2f 5f       	subi	r18, 0xFF	; 255
  94:	3f 4f       	sbci	r19, 0xFF	; 255
  96:	2f 73       	andi	r18, 0x3F	; 63
  98:	30 78       	andi	r19, 0x80	; 128
  9a:	20 83       	st	Z, r18
  9c:	08 95       	ret

0000009e <__vector_18>:
/* Interrupt Service Routine for Receive Complete 
NOTE: vector name changes with different AVRs see AVRStudio -
Help - AVR-Libc reference - Library Reference - <avr/interrupt.h>: Interrupts
for vector names other than USART_RXC_vect for ATmega32 */

ISR(USART_RX_vect){
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	2f 93       	push	r18
  aa:	3f 93       	push	r19
  ac:	4f 93       	push	r20
  ae:	5f 93       	push	r21
  b0:	6f 93       	push	r22
  b2:	7f 93       	push	r23
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	af 93       	push	r26
  ba:	bf 93       	push	r27
  bc:	ef 93       	push	r30
  be:	ff 93       	push	r31
 
   cli(); // Turn off interrupts temporarily to make sure the data gets stored in the ring buffer
  c0:	f8 94       	cli
   value = UDR0;             //read UART register into value
  c2:	80 91 c6 00 	lds	r24, 0x00C6
  c6:	80 93 44 01 	sts	0x0144, r24
   writeCircBuff(&rBuff,value); //Write the data into the ring buffer, this isn't interrupted because ints are off
  ca:	60 91 44 01 	lds	r22, 0x0144
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	d2 df       	rcall	.-92     	; 0x78 <_Z13writeCircBuffPV10CircBuff_th>
   sei();  //Reenable interrupts
  d4:	78 94       	sei
}
  d6:	ff 91       	pop	r31
  d8:	ef 91       	pop	r30
  da:	bf 91       	pop	r27
  dc:	af 91       	pop	r26
  de:	9f 91       	pop	r25
  e0:	8f 91       	pop	r24
  e2:	7f 91       	pop	r23
  e4:	6f 91       	pop	r22
  e6:	5f 91       	pop	r21
  e8:	4f 91       	pop	r20
  ea:	3f 91       	pop	r19
  ec:	2f 91       	pop	r18
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <_Z10USART_Initv>:
  to change use UCSRC, see AVR datasheet*/ 

  // Enable receiver and transmitter and receive complete interrupt 
  //UCSR0B = ((1<<TXEN0)|(1<<RXEN0) | (1<<RXCIE0));
  
  	UCSR0A = (1 << U2X0);   //U2X0 = 1: asynchronous double speed mode, U2X = 0: asynchronous normal mode
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	80 93 c0 00 	sts	0x00C0, r24

  	/* Turn on the transmission and reception circuitry. */
  	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  fe:	e1 ec       	ldi	r30, 0xC1	; 193
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	88 e1       	ldi	r24, 0x18	; 24
 104:	80 83       	st	Z, r24
  	/* Use 8-bit character sizes. */
  	//UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);

  	/* BAUD prescale */
  	UBRR0 = BAUD_PRESCALE;
 106:	8c e0       	ldi	r24, 0x0C	; 12
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 c5 00 	sts	0x00C5, r25
 10e:	80 93 c4 00 	sts	0x00C4, r24
  	/* Load upper 8-bits of the baud rate value into the high byte of the UBRR register. */
  	//UBRR0H = (BAUD_PRESCALE >> 8);
  	/* Load lower 8-bits of the baud rate value into the low byte of the UBRR register. */
  	//UBRR0L = BAUD_PRESCALE;

  	UCSR0B |= (1 << RXCIE0);
 112:	80 81       	ld	r24, Z
 114:	80 68       	ori	r24, 0x80	; 128
 116:	80 83       	st	Z, r24

  	sei();
 118:	78 94       	sei
 11a:	08 95       	ret

0000011c <_Z14USART_SendByteh>:


void USART_SendByte(uint8_t u8Data){

  // Wait until last byte has been transmitted
  while((UCSR0A &(1<<UDRE0)) == 0);
 11c:	e0 ec       	ldi	r30, 0xC0	; 192
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	90 81       	ld	r25, Z
 122:	95 ff       	sbrs	r25, 5
 124:	fd cf       	rjmp	.-6      	; 0x120 <_Z14USART_SendByteh+0x4>

  // Transmit data
  UDR0 = u8Data;
 126:	80 93 c6 00 	sts	0x00C6, r24
 12a:	08 95       	ret

0000012c <_Z8Led_initv>:

//This assumes that an led is attached to Port B pin 0
//+ side on pin 0, - side connected to resistor connecting to ground.
void Led_init(void){
   //outputs, PB0 on
	 DDRB =0x01;       
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	84 b9       	out	0x04, r24	; 4
   PORTB = 0x01;        
 130:	85 b9       	out	0x05, r24	; 5
 132:	08 95       	ret

00000134 <main>:
/*
* Initializes the head and tail state for the ring buffer
*/
void initCircBuff(volatile CircBuff_t *cBuff)
{
	cBuff->Head = 0; //Points to the first valid byte in the buffer
 134:	10 92 40 01 	sts	0x0140, r1
	cBuff->Tail = 1; //points to next empty byte
 138:	c1 e0       	ldi	r28, 0x01	; 1
 13a:	c0 93 41 01 	sts	0x0141, r28
	cBuff->OverRun = 0; //true false overrun
 13e:	10 92 43 01 	sts	0x0143, r1
 142:	10 92 42 01 	sts	0x0142, r1
}


int main(void){
   initCircBuff(&rBuff);
   USART_Init();  // Initialise USART
 146:	d8 df       	rcall	.-80     	; 0xf8 <_Z10USART_Initv>
   Led_init();    // init LEDs for testing
 148:	f1 df       	rcall	.-30     	; 0x12c <_Z8Led_initv>
   value = 'A'; //0x41;    
 14a:	81 e4       	ldi	r24, 0x41	; 65
 14c:	80 93 44 01 	sts	0x0144, r24
   PORTB = 0x01; // 0 = LED on
 150:	c5 b9       	out	0x05, r28	; 5
   
   for(;;){    // Repeat indefinitely
             
	if(value == 0x41)
	{
		PORTB=0x01;
 152:	ff 24       	eor	r15, r15
 154:	f3 94       	inc	r15
	else
	{
		PORTB=0x00;
	}
			 
	if((rBuff.Head+1)%BUFF_SIZE != rBuff.Tail)
 156:	00 e4       	ldi	r16, 0x40	; 64
 158:	11 e0       	ldi	r17, 0x01	; 1
 15a:	c1 e4       	ldi	r28, 0x41	; 65
 15c:	d1 e0       	ldi	r29, 0x01	; 1
   value = 'A'; //0x41;    
   PORTB = 0x01; // 0 = LED on
   
   for(;;){    // Repeat indefinitely
             
	if(value == 0x41)
 15e:	80 91 44 01 	lds	r24, 0x0144
 162:	81 34       	cpi	r24, 0x41	; 65
 164:	11 f4       	brne	.+4      	; 0x16a <main+0x36>
	{
		PORTB=0x01;
 166:	f5 b8       	out	0x05, r15	; 5
 168:	01 c0       	rjmp	.+2      	; 0x16c <main+0x38>
	}
	else
	{
		PORTB=0x00;
 16a:	15 b8       	out	0x05, r1	; 5
	}
			 
	if((rBuff.Head+1)%BUFF_SIZE != rBuff.Tail)
 16c:	f8 01       	movw	r30, r16
 16e:	20 81       	ld	r18, Z
 170:	88 81       	ld	r24, Y
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	2f 5f       	subi	r18, 0xFF	; 255
 176:	3f 4f       	sbci	r19, 0xFF	; 255
 178:	2f 73       	andi	r18, 0x3F	; 63
 17a:	30 78       	andi	r19, 0x80	; 128
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	28 17       	cp	r18, r24
 180:	39 07       	cpc	r19, r25
 182:	69 f3       	breq	.-38     	; 0x15e <main+0x2a>
	{
		USART_SendByte(readCircbuff(&rBuff));  // send value
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	66 df       	rcall	.-308    	; 0x56 <_Z12readCircbuffPV10CircBuff_t>
 18a:	c8 df       	rcall	.-112    	; 0x11c <_Z14USART_SendByteh>
 18c:	e8 cf       	rjmp	.-48     	; 0x15e <main+0x2a>

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
